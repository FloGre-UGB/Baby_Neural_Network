getwd()
reticulate::repl_python()
import pandas as pd
df = pd.read_csv("college.csv")
View(df)
View(df)
y = df[["private"]]
X = df[["Apps":]]
y = df[["private"]]
X = df[["Apps",:]]
X = df.loc[:, df.columns !="private"]
y = df[["private"]]
X = df.loc[:, df.columns !="private" and df.columns != 0]
y = df[["private"]]
X = df.loc[:,2:]
X = df.iloc[:,2:]
y = df[["private"]]
y = df[["Private"]]
View(X)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2)
X_train, X_test, y_train, y_test = train_test_split(X,y,
test_size = 0.2, random_state = 1)
View(y)
y["Private"].unique()
length(y["Private"].unique())
len(y["Private"].unique())
L = 3 # no layers
# Define number of neurons per layer
n = [len(X.columns),4, len(y["Private"].unique())]
# choose random weights and biases
Weights = []
for i in range(0,len(n)):
Weights.append(np.reshape(np.random.normal(n[i+1]*n[i]), (n[i+1], n[i])))
import numpy as np
L = 3 # no layers
# Define number of neurons per layer
n = [len(X.columns),4, len(y["Private"].unique())]
# choose random weights and biases
Weights = []
for i in range(0,len(n)):
Weights.append(np.reshape(np.random.normal(n[i+1]*n[i]), (n[i+1], n[i])))
L = 3 # no layers
# Define number of neurons per layer
n = [len(X.columns),4, len(y["Private"].unique())]
# choose random weights and biases
Weights = []
for i in range(0,len(n)):
W = np.reshape(np.random.normal(n[i+1]*n[i]), (n[i+1], n[i]))
Weights.append(W)
for i in range(0,len(n)):
W = np.reshape(np.random.normal(n[i+1]*n[i]), (n[i+1], n[i]))
Weights.append(W)
Weights = []
for i in range(0,len(n)):
w = np.random.normal(n[i+1]*n[i])
W = np.reshape(w, (n[i+1], n[i]))
Weights.append(W)
